//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native"]
}

enum Role {
    USER
    SELLER
    ADMIN
}

/// @@allow('create,read', true)
/// @@allow('all', auth() == this)
model User {
    createdAt DateTime @default(now())
    editedAt DateTime @default(now())
    id String @id() @default(cuid())
    /// @email
    email String @unique()
    /// @password
    /// @omit
    /// @length(8, 16)
    password String
    role Role @default(USER)
    selling Book[]
    sessions UserSession[]
    carts Cart[] @relation("Cart")
}

model UserSession {
    createdAt DateTime @default(now())
    editedAt DateTime @default(now())
    id String @id() @unique() @default(uuid())
    user User @relation(fields: [userId], references: [id])
    userId String
}

/// @@allow('read', true)
/// @@allow('create,update,delete', auth() == this.seller)
model Book {
    createdAt DateTime @default(now())
    editedAt DateTime @default(now())
    id String @id() @default(cuid())
    title String
    author String
    price Float
    description String
    image String
    seller User @relation(fields: [sellerId], references: [id])
    sellerId String
    quantity Int
    inCart CartItem[]
}

/// @@allow('read', true)
/// @@allow('create,update,delete', auth() == this.user)
model Cart {
    createdAt DateTime @default(now())
    editedAt DateTime @default(now())
    id String @id() @default(cuid())
    user User @relation("Cart", fields: [userId], references: [id])
    userId String
    items CartItem[]
}

/// @@allow('read', true)
/// @@allow('create,update,delete', auth() == this.cart.user)
model CartItem {
    createdAt DateTime @default(now())
    editedAt DateTime @default(now())
    id String @id() @default(cuid())
    book Book @relation(fields: [bookId], references: [id])
    bookId String
    quantity Int
    cart Cart @relation(fields: [cartId], references: [id])
    cartId String
}